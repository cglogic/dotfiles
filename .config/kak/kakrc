set-option global ui_options 'terminal_status_on_top=false' 'terminal_assistant=none' 'terminal_change_colors=false' 'terminal_enable_mouse=false' 'terminal_set_title=true' 'terminal_synchronized=true'
# set-option global autoinfo normal|command|onkey
set-option global makecmd 'make'
set-option global grepcmd 'ag --nocolor --column'
set-option global indentwidth 0
set-option global tabstop 4
set-option global autocomplete prompt

# colorscheme tomorrow-night
colorscheme %sh{ case "$TERM" in xterm) echo "default" ;; *) echo "tomorrow-night" ;; esac }

add-highlighter global/ number-lines -hlcursor -separator ' '
add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces -tab '→' -spc '•' -lf ' ' -only-trailing
add-highlighter global/ dynregex '%reg{/}' 0:+u
# add-highlighter global/ wrap -word -indent
# add-highlighter global/trailing-whitespace regex '\h+$' 0:Error

hook global -always BufOpenFifo '\*grep\*' %{ map global normal <minus> ': grep-next-match<ret>' }
hook global -always BufOpenFifo '\*make\*' %{ map global normal <minus> ': make-next-error<ret>' }

hook global ModeChange push:insert:.* %{ map window insert <a-space> <c-o> }
hook global ModeChange pop:insert:.* %{ unmap window insert <a-space> <c-o> }

hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p>; execute-keys <c-o> }

map global normal '#' :comment-line<ret>

hook global WinSetOption filetype=(c|cpp) %{
	set-option global clang_options '-std=c++26'
	set-option window formatcmd '$CF -style=file'
	set-option global tabstop 4
	# clang-enable-autocomplete
	# clang-enable-diagnostics
	# alias window lint clang-parse
	# alias window lint-next-error clang-diagnostics-next
	set-option buffer matching_pairs '{' '}' '[' ']' '(' ')'

	try %{
		add-highlighter -override buffer/operators regex (\W) 0:operator
		# add-highlighter -override buffer/operators regex (\+|-|\*|&|=|\\|\?|%|\|-|!|\||->|\.|,|<|>|:|\^|/|~|\[|\]) 0:operator
	}
}

hook global WinSetOption filetype=(python) %{
	set-option global indentwidth 4
	set-option global tabstop 4

	try %{
		add-highlighter -override buffer/operators regex (\W) 0:operator
	}
}

hook global WinSetOption filetype=(sql) %{
	try %{
		add-highlighter -override buffer/operators regex (\W) 0:operator
	}
}

hook global WinSetOption filetype=(markdown) %{
	try %{
		add-highlighter global/ wrap -word -indent
	}
}

hook global ModuleLoaded c-family %{ try %{ evaluate-commands %sh{
	for filetype in c cpp; do
		printf "%s\n" "add-highlighter shared/$filetype/code/types_1 regex \b(v|u|vu)\w+(8|16|32|64)(_t)?\b 0:type
		add-highlighter shared/$filetype/code/types_2 regex \b(v|u|vu)?(_|__)?(s|u)(8|16|32|64)(_t)?\b 0:type
		add-highlighter shared/$filetype/code/types_3 regex \b(v|u|vu)(_|__)?(int|short|char|long)(_t)?\b 0:type
		add-highlighter shared/$filetype/code/types_4 regex \b\w+_t\b 0:type"
	done
}}}

hook global BufCreate '\*make\*' %{
	hook -once buffer NormalKey '<esc>' %{ try %{
		delete-buffer *make*
	}}
}

hook global BufCreate '\*grep\*' %{
	hook -once buffer NormalKey '<esc>' %{ try %{
		delete-buffer *grep*
	}}
}

hook global BufCreate '\*debug\*' %{
	hook -once buffer NormalKey '<esc>' %{ try %{
		delete-buffer *debug*
	}}
}

hook global BufCreate '\*scratch\*' %{
	hook -once buffer NormalKey '<esc>' %{ try %{
		delete-buffer *scratch*
	}}
}

define-command -docstring 'Open a file' -params 0 open-file %{
evaluate-commands %sh{
		FS=$(swaymsg -t get_tree | jq '.. | select(.type?) | select(.focused==true) | .fullscreen_mode')
		# if [ $? -nq 0 ]; then
		# 	exit
		# fi
		CMD="kak-fzy-open $kak_command_fifo"
		if [ $FS -eq 1 ]; then
			foot --fullscreen --title=file-open ${CMD} >/dev/null 2>&1
			swaymsg fullscreen enable >/dev/null 2>&1
		else
			foot --title=file-open ${CMD} >/dev/null 2>&1
		fi
	}
}

map global normal '<backspace>' :open-file<ret>
