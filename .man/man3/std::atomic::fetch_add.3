.TH std::atomic::fetch_add 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic::fetch_add \- std::atomic::fetch_add

.SH Synopsis
   T fetch_add( T arg,
   std::memory_order order =
   std::memory_order_seq_cst );
   T fetch_add( T arg,                       \fI(since C++11)\fP
   std::memory_order order =                 (member only of
   std::memory_order_seq_cst ) volatile; \fB(1)\fP atomic<Integral>
   T* fetch_add( std::ptrdiff_t arg,         template
   std::memory_order order =                 specialization)      \fI(since C++11)\fP
   std::memory_order_seq_cst );                               \fB(2)\fP (member only of
   T* fetch_add( std::ptrdiff_t arg,                              atomic<T*> template
   std::memory_order order =                                      specialization)
   std::memory_order_seq_cst ) volatile;

   Atomically replaces the current value with the result of arithmetic addition of the
   value and arg. The operation is read-modify-write operation. Memory is affected
   according to the value of order.

   For signed Integral types, arithmetic is defined to use twoâ€™s complement
   representation. There are no undefined results. For T* types, the result may be an
   undefined address, but the operations otherwise have no undefined behavior.

.SH Parameters

   arg   - the other argument of arithmetic addition
   order - memory order constraints to enforce

.SH Return value

   The value immediately preceding the effects of this function in the modification
   order of *this.

.SH Exceptions

   noexcept specification:
   noexcept

.SH Example

   
// Run this code

 #include <iostream>
 #include <thread>
 #include <atomic>

 std::atomic<long long> data;
 void do_work()
 {
     data.fetch_add(1, std::memory_order_relaxed);
 }

 int main()
 {
     std::thread th1(do_work);
     std::thread th2(do_work);
     std::thread th3(do_work);
     std::thread th4(do_work);
     std::thread th5(do_work);

     th1.join();
     th2.join();
     th3.join();
     th4.join();
     th5.join();

     std::cout << "Result:" << data << '\\n';
 }

.SH Output:

 Result:5

.SH See also

   atomic_fetch_add          adds a non-atomic value to an atomic object and obtains
   atomic_fetch_add_explicit the previous value of the atomic
   \fI(C++11)\fP                   \fI(function template)\fP
   \fI(C++11)\fP

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
