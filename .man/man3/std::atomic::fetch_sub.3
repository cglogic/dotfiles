.TH std::atomic::fetch_sub 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic::fetch_sub \- std::atomic::fetch_sub

.SH Synopsis
   T fetch_sub( T arg,
   std::memory_order order =
   std::memory_order_seq_cst );
   T fetch_sub( T arg,
   std::memory_order order =              \fI(since C++11)\fP
   std::memory_order_seq_cst ) volatile;  (member only of
   T* fetch_sub( std::ptrdiff_t arg,      atomic<Integral>
   std::memory_order order =              template specialization) \fI(since C++11)\fP
   std::memory_order_seq_cst );                                    (member only of
   T* fetch_sub( std::ptrdiff_t arg,                               atomic<T*> template
   std::memory_order order =                                       specialization)
   std::memory_order_seq_cst ) volatile;

   Atomically replaces the current value with the result of arithmetic subtraction of
   the value and arg. The operation is read-modify-write operation. Memory is affected
   according to the value of order.

   For signed Integral types, arithmetic is defined to use twoâ€™s complement
   representation. There are no undefined results. For T* types, the result may be an
   undefined address, but the operations otherwise have no undefined behavior.

.SH Parameters

   arg   - the other argument of arithmetic subtraction
   order - memory order constraints to enforce

.SH Return value

   The value immediately preceding the effects of this function in the modification
   order of *this.

.SH Exceptions

   noexcept specification:
   noexcept

.SH See also

   atomic_fetch_sub          subtracts a non-atomic value from an atomic object and
   atomic_fetch_sub_explicit obtains the previous value of the atomic
   \fI(C++11)\fP                   \fI(function template)\fP
   \fI(C++11)\fP

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
