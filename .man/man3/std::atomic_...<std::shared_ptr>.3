.TH std::atomic_...<std::shared_ptr> 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_...<std::shared_ptr> \- std::atomic_...<std::shared_ptr>

.SH Synopsis
   template< class T >                                               \fB(1)\fP  \fI(since C++11)\fP
   bool atomic_is_lock_free( const std::shared_ptr<T>* p );
   template< class T >                                               \fB(2)\fP  \fI(since C++11)\fP
   std::shared_ptr<T> atomic_load( const std::shared_ptr<T>* p );
   template< class T >

   std::shared_ptr<T> atomic_load_explicit( const                    \fB(3)\fP  \fI(since C++11)\fP
   std::shared_ptr<T>* p,

   std::memory_order mo );
   template< class T >

   void atomic_store( std::shared_ptr<T>* p,                         \fB(4)\fP  \fI(since C++11)\fP

   std::shared_ptr<T> r );
   template< class T >

   void atomic_store_explicit( std::shared_ptr<T>* p,                \fB(5)\fP  \fI(since C++11)\fP
   std::shared_ptr<T> r,

   std::memory_order mo);
   template< class T >

   std::shared_ptr<T> atomic_exchange( std::shared_ptr<T>* p,        \fB(6)\fP  \fI(since C++11)\fP

   std::shared_ptr<T> r);
   template<class T>

   std::shared_ptr<T> atomic_exchange_explicit( std::shared_ptr<T>*
   p,                                                                \fB(7)\fP  \fI(since C++11)\fP
   std::shared_ptr<T> r,

   std::memory_order mo);
   template< class T >

   bool atomic_compare_exchange_weak( std::shared_ptr<T>* p,         \fB(8)\fP  \fI(since C++11)\fP
   std::shared_ptr<T>* expected,

   std::shared_ptr<T> desired);
   template<class T>

   bool atomic_compare_exchange_strong( std::shared_ptr<T>* p,       \fB(9)\fP  \fI(since C++11)\fP
   std::shared_ptr<T>* expected,

   std::shared_ptr<T> desired);
   template< class T >

   bool atomic_compare_exchange_strong_explicit( std::shared_ptr<T>*
   p,
   std::shared_ptr<T>* expected,                                     \fB(10)\fP \fI(since C++11)\fP
   std::shared_ptr<T> desired,
   std::memory_order success,

   std::memory_order failure);
   template< class T >

   bool atomic_compare_exchange_weak_explicit( std::shared_ptr<T>*
   p,
   std::shared_ptr<T>* expected,                                     \fB(11)\fP \fI(since C++11)\fP
   std::shared_ptr<T> desired,
   std::memory_order success,

   std::memory_order failure);

   If multiple threads of execution access the same std::shared_ptr object without
   synchronization and any of those accesses uses a non-const member function of
   shared_ptr then a data race will occur unless all such access is performed through
   these functions, which are overloads of the corresponding atomic access functions
   (std::atomic_load, std::atomic_store, etc.)

   Note that the control block of a shared_ptr is thread-safe: different
   std::shared_ptr objects can be accessed using mutable operations, such as operator=
   or reset, simultaneously by multiple threads, even when these instances are copies,
   and share the same control block internally.

   1) Determines whether atomic access to the shared pointer pointed-to by p is
   lock-free.
   2) Equivalent to atomic_load_explicit(p, std::memory_order_seq_cst)
   3) Returns the shared pointer pointed-to by p. As with the non-specialized
   std::atomic_load_explicit, mo cannot be std::memory_order_release or
   std::memory_order_acq_rel
   4) Equivalent to atomic_store_explicit(p, r, memory_order_seq_cst)
   5) Stores the shared pointer r in the shared pointer pointed-to by p atomically,
   effectively executing p->swap(r). As with the non-specialized
   std::atomic_store_explicit, mo cannot be std::memory_order_acquire or
   std::memory_order_acq_rel.
   6) Equivalent to atomic_exchange_explicit(p, r, memory_order_seq_cst)
   7) Stores the shared pointer r in the shared pointer pointed to by p and returns the
   value formerly pointed-to by p, atomically. Effectively executes p->swap(r) and
   returns a copy of r after the swap.
   8) Equivalent to atomic_compare_exchange_weak_explicit(p, expected, desired,
   std::memory_order_seq_cst, std::memory_order_seq_cst)
   9) Equivalent to atomic_compare_exchange_strong_explicit(p, expected, desired,
   std::memory_order_seq_cst, std::memory_order_seq_cst)
   10) Compares the shared pointers pointed-to by p and expected. If they are
   equivalent (share ownership of the same pointer and refer to the same pointer),
   assigns desired into *p using the memory ordering constraints specified by success
   and returns true. If they are not equivalent, assigns *p into *expected using the
   memory ordering constraints specified by failure and returns false.
   11) Same as 10), but may fail spuriously.

   All these functions invoke undefined behavior if p is a null pointer.

.SH Parameters

   p, expected          - a pointer to a std::shared_ptr
   r, desired           - a std::shared_ptr
   mo, success, failure - memory ordering selectors of type std::memory_order

.SH Exceptions

   These functions do not throw exceptions.

.SH Return value

   1) true if atomic access is implemented using lock-free instructions
   2,3) A copy of the pointed-to shared pointer.
   4,5) \fI(none)\fP
   6,7) A copy of the formerly pointed-to shared pointer
   8,9,10,11) true if the shared pointers were equivalent and the exchange was
   performed, false otherwise.

.SH Notes

   The Concurrency TS offers atomic smart pointer classes atomic_shared_ptr and
   atomic_weak_ptr as a replacement for the use of these functions.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   atomic_is_lock_free                     checks if the atomic type's operations are
   \fI(C++11)\fP                                 lock-free
                                           \fI(function template)\fP
   atomic_store                            atomically replaces the value of the atomic
   atomic_store_explicit                   object with a non-atomic argument
   \fI(C++11)\fP                                 \fI(function template)\fP
   \fI(C++11)\fP
   atomic_load                             atomically obtains the value stored in an
   atomic_load_explicit                    atomic object
   \fI(C++11)\fP                                 \fI(function template)\fP
   \fI(C++11)\fP
   atomic_exchange                         atomically replaces the value of the atomic
   atomic_exchange_explicit                object with non-atomic argument and returns
   \fI(C++11)\fP                                 the old value of the atomic
   \fI(C++11)\fP                                 \fI(function template)\fP
   atomic_compare_exchange_weak
   atomic_compare_exchange_weak_explicit   atomically compares the value of the atomic
   atomic_compare_exchange_strong          object with non-atomic argument and performs
   atomic_compare_exchange_strong_explicit atomic exchange if equal or atomic load if
   \fI(C++11)\fP                                 not
   \fI(C++11)\fP                                 \fI(function template)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP

.SH Category:

     * Todo no example
