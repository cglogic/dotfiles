.TH std::atomic_fetch_xor,std::atomic_fetch_xor_explicit 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_fetch_xor,std::atomic_fetch_xor_explicit \- std::atomic_fetch_xor,std::atomic_fetch_xor_explicit

.SH Synopsis
   Defined in header <atomic>
   template< class Integral >
   Integral atomic_fetch_xor(
   std::atomic<Integral>* obj, Integral arg );
   template< class Integral >
   Integral atomic_fetch_xor( volatile
   std::atomic<Integral>* obj, Integral arg );
   template< class Integral >

   Integral atomic_fetch_xor_explicit(            \fB(1)\fP \fI(since C++11)\fP
   std::atomic<Integral>* obj, Integral arg,

   std::memory_order order );                                       \fB(2)\fP \fI(since C++11)\fP
   template< class Integral >

   Integral atomic_fetch_xor_explicit( volatile
   std::atomic<Integral>* obj, Integral arg,

   std::memory_order order );

   Atomically replaces the value pointed by obj with the result of bitwise XOR between
   the old value of obj and arg. Returns the value obj held previously.

   The operation is performed as if the following is executed:

   1) obj->fetch_xor(arg)
   2) obj->fetch_xor(arg, order)

.SH Parameters

   obj   - pointer to the atomic object to modify
   arg   - the value to bitwise XOR to the value stored in the atomic object
   order - the memory sycnhronization ordering for this operation: all values are
           permitted.

.SH Return value

   The value immediately preceding the effects of this function in the modification
   order of *obj.

.SH Exceptions

   noexcept specification:
   noexcept

.SH Possible implementation

template< class T >
typename std::enable_if<std::is_integral<T>::value && !std::is_same<T, bool>::value, T>::type
atomic_fetch_xor( std::atomic<T>* obj, T arg );
{
    return obj->fetch_xor(arg);
}

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

                             atomically performs bitwise XOR between the argument and
   fetch_xor                 the value of the atomic object and obtains the value held
                             previously
                             \fI(public member function of std::atomic)\fP
   atomic_fetch_or           replaces the atomic object with the result of logical OR
   atomic_fetch_or_explicit  with a non-atomic argument and obtains the previous value
   \fI(C++11)\fP                   of the atomic
   \fI(C++11)\fP                   \fI(function template)\fP
   atomic_fetch_and          replaces the atomic object with the result of logical AND
   atomic_fetch_and_explicit with a non-atomic argument and obtains the previous value
   \fI(C++11)\fP                   of the atomic
   \fI(C++11)\fP                   \fI(function template)\fP
   C documentation for
   atomic_fetch_xor,
   atomic_fetch_xor_explicit

   Categories:

     * unconditionally noexcept
     * Todo no example

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
