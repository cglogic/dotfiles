.TH std::atomic_store,std::atomic_store_explicit 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_store,std::atomic_store_explicit \- std::atomic_store,std::atomic_store_explicit

.SH Synopsis
   Defined in header <atomic>
   template< class T >
   void atomic_store( std::atomic<T>* obj, T desr
   );
   template< class T >
   void atomic_store( volatile std::atomic<T>*
   obj, T desr );
   template< class T >

   void atomic_store_explicit( std::atomic<T>*    \fB(1)\fP \fI(since C++11)\fP
   obj, T desr,

   std::memory_order order);                                        \fB(2)\fP \fI(since C++11)\fP
   template< class T >

   void atomic_store_explicit( volatile
   std::atomic<T>* obj, T desr,

   std::memory_order order);

   1) Atomically replaces the value pointed to by obj with the value of desr as if by
   obj->store(desr)
   2) Atomically replaces the value pointed to by obj with the value of desr as if by
   obj->store(desr, order)

.SH Parameters

   obj   - pointer to the atomic object to modify
   desr  - the value to store in the atomic object
           the memory synchronization ordering for this operation: only
   order - std::memory_order_relaxed, std::memory_order_release and
           std::memory_order_seq_cst are permitted.

.SH Return value

   none.

.SH Exceptions

   noexcept specification:
   noexcept

.SH See also

                                               atomically replaces the value of the
   store                                       atomic object with a non-atomic argument
                                               \fI(public member function of std::atomic)\fP
   atomic_load                                 atomically obtains the value stored in
   atomic_load_explicit                        an atomic object
   \fI(C++11)\fP                                     \fI(function template)\fP
   \fI(C++11)\fP
   memory_order                                defines memory ordering constraints for
   \fI(C++11)\fP                                     the given atomic operation
                                               \fI(typedef)\fP
   std::atomic_store(std::shared_ptr)          specializes atomic operations for
   std::atomic_store_explicit(std::shared_ptr) std::shared_ptr
                                               \fI(function template)\fP
   C documentation for
   atomic_store,
   atomic_store_explicit

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
