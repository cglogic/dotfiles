.TH std::ctype::scan_is,std::ctype::do_scan_is 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ctype::scan_is,std::ctype::do_scan_is \- std::ctype::scan_is,std::ctype::do_scan_is

.SH Synopsis
   Defined in header <locale>
   public:                                                                         \fB(1)\fP
   const CharT* scan_is( mask m, const CharT* beg, const CharT* end ) const;
   protected:
   virtual const CharT* do_scan_is( mask m, const CharT* beg, const CharT* end)    \fB(2)\fP
   const;

   1) public member function, calls the protected virtual member function do_scan_is of
   the most derived class.
   2) Locates the first character in the character array [beg, end) that satisfies the
   classification mask m, that is, the first character c such that is(m, c) would
   return true.

.SH Parameters

   m   - mask to search for
   beg - pointer to the first character in an array of characters to search
   end - one past the end pointer for the array of characters to search

.SH Return value

   Pointer to the first character in [beg, end) that satisfies the mask, or end if no
   such character was found.

.SH Example

   
// Run this code

 #include <locale>
 #include <iostream>
 #include <iterator>

 int main()
 {
     auto& f = std::use_facet<std::ctype<char>>(std::locale(""));

     // skip until the first letter
     char s1[] = "      \\t\\t\\n  Test";
     const char* p1 = f.scan_is(std::ctype_base::alpha, std::begin(s1), std::end(s1));
     std::cout << "'" << p1 << "'\\n";

     // skip until the first letter
     char s2[] = "123456789abcd";
     const char* p2 = f.scan_is(std::ctype_base::alpha, std::begin(s2), std::end(s2));
     std::cout << "'" << p2 << "'\\n";
 }

.SH Output:

 'Test'
 'abcd'

.SH See also

   do_scan_not locates the first character in a sequence that fails given
   \fB[virtual]\fP   classification
               \fI(virtual protected member function)\fP
