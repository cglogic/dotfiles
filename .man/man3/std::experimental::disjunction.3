.TH std::experimental::disjunction 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::disjunction \- std::experimental::disjunction

.SH Synopsis
   Defined in header <experimental/type_traits>
   template<class... B>                          (library fundamentals TS v2)
   struct disjunction;

   Forms the logical disjunction of the type traits B....

   The BaseCharacteristic of a specialization disjunction<B1, ..., BN> is the first Bi
   for which Bi::value != false, or if every Bi::value == false, the BaseCharacteristic
   is BN.

   If sizeof...(B) == 0, the BaseCharacteristic is std::false_type.

   Disjunction is short-circuiting: if there is a template type argument Bi with
   Bi::value != false, then instantiating disjunction<B1, ..., BN>::value does not
   require the instantiation of Bj::value for j > i

.SH Template parameters

   B... - every type must be usable as a base class and define member B::value that is
          convertible to bool

  Helper variable template

   template<class... B>
   constexpr bool disjunction_v =                          (library fundamentals TS v2)
   disjunction<B...>::value;

.SH Possible implementation

template<class...> struct disjunction : std::false_type { };
template<class B1> struct disjunction<B1> : B1 { };
template<class B1, class... Bn>
struct disjunction<B1, Bn...> : std::conditional_t<B1::value != false, B1, disjunction<Bn...>>  { };

.SH Notes

   A specialization of disjunction does not necessarily have a BaseCharacteristic of
   either std::true_type or std::false_type: it simply inherits the base characteristic
   of the first B whose ::value, converted to bool, is true, or the base characteristic
   of the very last B when all of them convert to false. For example,
   disjunction<std::integral_constant<int, 2>, std::integral_constant<int, 4>>::value
   is 2.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   disjunction variadic logical OR metafunction
   \fI(C++17)\fP     \fI(class template)\fP

.SH Category:

     * Todo no example
