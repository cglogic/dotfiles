.TH std::experimental::ranges::DerivedFrom 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::DerivedFrom \- std::experimental::ranges::DerivedFrom

.SH Synopsis
   Defined in header <experimental/ranges/concepts>
   template < class T, class U >                           (ranges TS)
   concept bool DerivedFrom() { return /* see below */; }

   The concept DerivedFrom<T, U>() is satisfied if and only if std::is_base_of<U,
   T>::value is true.

.SH Notes

   Despite the use of std::is_base_of in its description, DerivedFrom is not required
   to use it in its implementation. Thus, DerivedFrom<T, U>() may not normalize
   tostd::is_base_of<U,T>::value during partial ordering of constraints.

.SH See also

   is_base_of checks if a type is derived from the other type
   \fI(C++11)\fP    \fI(class template)\fP
