.TH std::filesystem::path::concat,std::filesystem::path::operator+= 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::path::concat,std::filesystem::path::operator+= \- std::filesystem::path::concat,std::filesystem::path::operator+=

.SH Synopsis
   path& operator+=( const path& p );                          \fB(1)\fP \fI(since C++17)\fP
   path& operator+=( const string_type& str );                 \fB(2)\fP \fI(since C++17)\fP
   path& operator+=( std::basic_string_view<value_type> str );
   path& operator+=( const value_type* ptr );                  \fB(3)\fP \fI(since C++17)\fP
   path& operator+=( value_type x );                           \fB(4)\fP \fI(since C++17)\fP
   template< class Source >                                    \fB(5)\fP \fI(since C++17)\fP
   path& operator+=( const Source& source );
   template< class CharT >                                     \fB(6)\fP \fI(since C++17)\fP
   path& operator+=( CharT x );
   template< class Source >                                    \fB(7)\fP \fI(since C++17)\fP
   path& concat( const Source& source );
   template< class InputIt >                                   \fB(8)\fP \fI(since C++17)\fP
   path& concat( InputIterator first, InputIterator last );

   Concatenates the current path and the argument

   1) Concatenates *this and p in such a way that native() of the result is exactly
   original native() concatenated with p.native()
   2) Same as \fB(1)\fP, except the resulting native() is a concatenation of the original
   {native() and the string (or string view) str
   3) Same as \fB(1)\fP, except the resulting native() is a concatenation of the original
   native() and the null-terminated string whose first character is pointed to by ptr
   4) Same as \fB(1)\fP, except the resulting native() is a concatenation of the original
   native() and the single character x
   5) Same as \fB(1)\fP, except the resulting native() is a concatenation of the original
   native() and the sequence (which may be in portable or native format) represented by
   source, which may be std::basic_string, std::basic_string_view, null-terminated
   multicharacter string, or an input iterator pointing to a null-terminated
   multicharacter sequence.
   6) Same as \fB(4)\fP, except that character conversion may be performed
   7) Same as \fB(5)\fP
   8) Same as \fB(5)\fP, except that the sequence is represented by any iterator pair that
   designates a multicharacter string.

.SH Parameters

   p            - path to append
   str          - string or string view to append
   ptr          - pointer to the beginning of a null-terminated string to append
   x            - single character to append
                  std::basic_string, std::basic_string_view, null-terminated
   source       - multicharacter string, or an input iterator pointing to a
                  null-terminated multicharacter sequence, which represents a path name
                  (either in portable or in native format)
   first, last  - pair of InputIterators that specify a multicharacter sequence that
                  represents a path name
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   The value type of InputIt must be one of the encoded character types (char, wchar_t,
   char16_t and char32_t)
   -
   CharT must be one of the encoded character types (char, wchar_t, char16_t and
   char32_t)

.SH Return value

   *this

.SH Exceptions

   May throw filesystem_error on underlying OS API errors or std::bad_alloc if memory
   allocation fails.

.SH Notes

   Unlike with append() or operator/=, additional directory separators are never
   introduced.

.SH Example

   
// Run this code

 #include <iostream>
 #include <filesystem>
 namespace fs = std::filesystem;
 int main() {
     fs::path p1; // empty path
     p1 += "var"; // does not insert a separator
     std::cout << "\\"\\" + \\"var\\" == " << p1 << '\\n';
     p1 += "lib"; // does not insert a separator
     std::cout << "\\"\\" + \\"var\\" + \\"lib\\" == " << p1 << '\\n';
 }

.SH Output:

 "" + "var" == "var"
 "" + "var" + "lib" == "varlib"

.SH See also

   append     appends elements to the path with a directory separator
   operator/= \fI(public member function)\fP
   operator/  concatenates two paths with a directory separator
              \fI(function)\fP
