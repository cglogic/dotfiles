.TH std::iswblank 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::iswblank \- std::iswblank

.SH Synopsis
   Defined in header <cwctype>
   int iswblank( std::wint_t ch );  \fI(since C++11)\fP

   Checks if the given wide character is classified as blank character (that is, a
   whitespace character used to separate words in a sentence) by the current C locale.
   In the default C locale, only space (0x20) and horizontal tab (0x09) are blank
   characters.

.SH Parameters

   ch - wide character

.SH Return value

   Non-zero value if the wide character is a blank character, zero otherwise.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cwctype>
 #include <clocale>

 int main()
 {
     wchar_t c = L'\\u3000'; // Ideographic space ('　')

     std::cout << std::hex << std::showbase << std::boolalpha;
     std::cout << "in the default locale, iswblank(" << (std::wint_t)c << ") = "
               << (bool)std::iswblank(c) << '\\n';
     std::setlocale(LC_ALL, "en_US.utf8");
     std::cout << "in Unicode locale, iswblank(" << (std::wint_t)c << ") = "
               << (bool)std::iswblank(c) << '\\n';
 }

.SH Output:

 in the default locale, iswblank(0x3000) = false
 in Unicode locale, iswblank(0x3000) = true

.SH See also

   isblank(std::locale) checks if a character is classified as a blank character by a
   \fI(C++11)\fP              locale
                        \fI(function template)\fP
   isblank              checks if a character is a blank character
   \fI(C++11)\fP              \fI(function)\fP
   C documentation for
   iswblank

  ASCII values         characters      iscntrl  isprint  isspace  isblank  isgraph  ispunct  isalnum  isalpha  isupper  islower  isdigit  isxdigit
      (hex)                            iswcntrl iswprint iswspace iswblank iswgraph iswpunct iswalnum iswalpha iswupper iswlower iswdigit iswxdigit
0 - 8   0x00-0x08 control codes (NUL,  ≠0       0        0        0        0        0        0        0        0        0        0        0
                  etc.)
9       0x09      tab (\\t)             ≠0       0        ≠0       ≠0       0        0        0        0        0        0        0        0
10 - 13 0x0A-0x0D whitespaces          ≠0       0        ≠0       0        0        0        0        0        0        0        0        0
                  (\\n,\\v,\\f,\\r)
14 - 31 0x0E-0x1F control codes        ≠0       0        0        0        0        0        0        0        0        0        0        0
32      0x20      space                0        ≠0       ≠0       ≠0       0        0        0        0        0        0        0        0
33 - 47 0x21-0x2F !"#$%&'()*+,-./      0        ≠0       0        0        ≠0       ≠0       0        0        0        0        0        0
48 - 57 0x30-0x39 0123456789           0        ≠0       0        0        ≠0       0        ≠0       0        0        0        ≠0       ≠0
58 - 64 0x3a-0x40 :;<=>?@              0        ≠0       0        0        ≠0       ≠0       0        0        0        0        0        0
65 - 70 0x41-0x46 ABCDEF               0        ≠0       0        0        ≠0       0        ≠0       ≠0       ≠0       0        0        ≠0
71 - 90 0x47-0x5A GHIJKLMNOPQRSTUVWXYZ 0        ≠0       0        0        ≠0       0        ≠0       ≠0       ≠0       0        0        0
91 - 96 0x5B-0x60 [\\]^_`               0        ≠0       0        0        ≠0       ≠0       0        0        0        0        0        0
97 -102 0x61-0x66 abcdef               0        ≠0       0        0        ≠0       0        ≠0       ≠0       0        ≠0       0        ≠0
103-122 0x67-0x7A ghijklmnopqrstuvwxyz 0        ≠0       0        0        ≠0       0        ≠0       ≠0       0        ≠0       0        0
123-126 0x7B-0x7E {|}~                 0        ≠0       0        0        ≠0       ≠0       0        0        0        0        0        0
127     0x7F      backspace character  ≠0       0        0        0        0        0        0        0        0        0        0        0
                  (DEL)
