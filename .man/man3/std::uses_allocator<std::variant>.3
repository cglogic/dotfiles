.TH std::uses_allocator<std::variant> 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uses_allocator<std::variant> \- std::uses_allocator<std::variant>

.SH Synopsis
   template <class... Types, class Alloc>
   struct uses_allocator<std::variant<Types...>, Alloc> : std::true_type  \fI(since C++17)\fP
   { };

   Provides a specialization of the std::uses_allocator type trait for std::variant to
   inform other library components that variant can be constructed with an allocator,
   even though it does not have a nested allocator_type.

.SH Type requirements
   -
   Alloc must meet the requirements of Allocator.

Inherited from std::integral_constant

.SH Member constants

   value    true
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   The std::variant itself does not use allocators, it passes then through to the
   constructors of the contained values.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   uses_allocator checks if the specified type supports uses-allocator construction
   \fI(C++11)\fP        \fI(class template)\fP

.SH Category:

     * Todo no example
