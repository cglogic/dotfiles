.TH std::variant 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::variant \- std::variant

.SH Synopsis
   Defined in header <variant>
   template <class... Types>    \fI(since C++17)\fP
   class variant;

   The class template std::variant represents a type-safe union. An instance of
   std::variant at any given time either holds a value of one of its alternative types,
   or it holds no value (this state is hard to achieve, see valueless_by_exception).

   As with unions, if a variant holds a value of some object type T, the object
   representation of T is allocated directly within the object representation of the
   variant itself. Variant is not allowed to allocate additional (dynamic) memory.

   A variant is not permitted to hold references, arrays, or the type void. Empty
   variants are also ill-formed (std::variant<std::monostate> can be used instead).

   A variant is permitted to hold the same type more than once, and to hold differently
   cv-qualified versions of the same type.

   As with unions, the default-initialized variant holds a value of its first
   alternative, unless that alternative is not default-constructible (in which case
   default constructor won't compile: the helper class std::monostate can be used to
   make such variants default-constructible)

.SH Template parameters

   Types - the types that may be stored in this variant. All types must be (possibly
           cv-qualified) non-array object types.

.SH Member functions

   constructor            constructs the variant object
                          \fI(public member function)\fP
   destructor             destroys the variant, along with its contained value
                          \fI(public member function)\fP
   operator=              assigns a variant
                          \fI(public member function)\fP
.SH Observers
                          returns the zero-based index of the alternative held by the
   index                  variant
                          \fI(public member function)\fP
   valueless_by_exception checks if the variant is in the invalid state
                          \fI(public member function)\fP
.SH Modifiers
   emplace                constructs a value in the variant, in place
                          \fI(public member function)\fP
   swap                   swaps with another variant
                          \fI(public member function)\fP

.SH Non-member functions

   visit                   calls the provided functor with the arguments held by one or
   \fI(C++17)\fP                 more variants
                           \fI(function template)\fP
   holds_alternative       checks if a given type appears exactly once in a variant
   \fI(C++17)\fP                 \fI(function template)\fP
   std::get(std::variant)  reads the value of the variant given the index or the type
   \fI(C++17)\fP                 (if the type is unique), throws on error
                           \fI(function template)\fP
   get_if                  obtains a pointer to the value of a pointed-to variant given
   \fI(C++17)\fP                 the index or the type (if unique), returns null on error
                           \fI(function template)\fP
   operator==
   operator!=
   operator<               compares variant objects as their contained values
   operator<=              \fI(function template)\fP
   operator>
   operator>=
   \fI(C++17)\fP
   std::swap(std::variant) specializes the std::swap algorithm
   \fI(C++17)\fP                 \fI(function)\fP

.SH Helper classes

   monostate                         placeholder type for use as the first alternative
   \fI(C++17)\fP                           in a variant of non-default-contructible types
                                     \fI(class)\fP
   bad_variant_access                exception thrown on invalid accesses to the value
   \fI(C++17)\fP                           of a variant
                                     \fI(class)\fP
   variant_size                      obtains the size of the variant's list of
   variant_size_v                    alternatives at compile time
   \fI(C++17)\fP                           \fI(class template)\fP (variable template)
   variant_alternative               obtains the type of the alternative specified by
   variant_alternative_t             its index, at compile time
   \fI(C++17)\fP                           \fI(class template)\fP (alias template)
   std::hash<std::variant>           specializes the std::hash algorithm
   \fI(C++17)\fP                           \fI(class template specialization)\fP
   std::uses_allocator<std::variant> specializes the std::uses_allocator type trait
   \fI(C++17)\fP                           \fI(class template specialization)\fP

  Helper objects

   variant_npos index of the variant in the invalid state
   \fI(C++17)\fP      (constant)

.SH Example

   
// Run this code

 #include <variant>
 #include <string>

 int main()
 {
     std::variant<int, float> v, w;
     v = 12; // v contains int
     int i = std::get<int>(v);
     w = std::get<int>(v);
     w = std::get<0>(v); // same effect as the previous line
     w = v; // same effect as the previous line

 //  std::get<double>(v); // error: no double in [int, float]
 //  std::get<3>(v);      // error: valid index values are 0 and 1

     try {
       std::get<float>(w); // w contains int, not float: will throw
     }
     catch (std::bad_variant_access&) {}

     std::variant<std::string> v("abc"); // converting constructors work when unambiguous
     v = "def"; // converting assignment also works when unambiguous
 }

.SH See also

   in_place
   in_place_type
   in_place_index   in-place construction tag
   in_place_t       \fI(class template)\fP
   in_place_type_t
   in_place_index_t
   \fI(C++17)\fP
   optional         a wrapper that may or may not hold an object
   \fI(since C++17)\fP    \fI(class template)\fP
   any              Objects that hold instances of any CopyConstructible type.
   \fI(since C++17)\fP    \fI(class)\fP
